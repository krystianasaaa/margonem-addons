# .github/workflows/update-guilds.yml
name: Update Dream Guilds

on:
  schedule:
    # Codziennie o 12:00 UTC (13:00 CET / 14:00 CEST)
    - cron: '0 12 * * *'  # NAPRAWKA: dodane brakujące *
  workflow_dispatch: # Możliwość ręcznego uruchomienia

permissions:
  contents: write  # NAPRAWKA: uprawnienia do zapisu

jobs:
  update-guilds:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check for changes
      id: changes
      run: |
        # Sprawdź czy są zmiany w git (plik jest już w guilds/)
        git add guilds/guilds.json
        if git diff --cached --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "🔄 Brak zmian w guilds.json"
        else
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "✅ guilds.json został zaktualizowany"
          
          # Pokaż statystyki
          if [ -f "guilds/guilds.json" ]; then
            PLAYERS=$(jq '. | length' guilds/guilds.json 2>/dev/null || echo "0")
            UNIQUE_GUILDS=$(jq -r '. | to_entries | map(.value) | unique | length' guilds/guilds.json 2>/dev/null || echo "0")
            echo "📊 Graczy: $PLAYERS, Klanów: $UNIQUE_GUILDS"
            echo "players=$PLAYERS" >> $GITHUB_OUTPUT
            echo "guilds=$UNIQUE_GUILDS" >> $GITHUB_OUTPUT
          fi
        fi
        
    - name: Commit and push changes
      if: steps.changes.outputs.changed == 'true'
      run: |
        # Konfiguracja git
        git config --global user.email "action@github.com"
        git config --global user.name "Dream Guild Bot"
        
        # Przygotuj commit message z timestamp
        TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
        PLAYERS="${{ steps.changes.outputs.players }}"
        
        # Dodaj plik i commituj
        git add guilds/guilds.json
        
        COMMIT_MSG="🤖 Update guilds.json - $TIMESTAMP

📊 Updated with $PLAYERS players from Dream world
🔄 Automated update via GitHub Actions"

        git commit -m "$COMMIT_MSG"
        
        # Push z retry w przypadku konfliktu
        for i in {1..3}; do
          if git push origin main; then
            echo "✅ Push successful on attempt $i"
            break
          else
            echo "⚠️ Push failed, attempt $i/3"
            if [ $i -eq 3 ]; then
              echo "❌ Push failed after 3 attempts"
              exit 1
            fi
            sleep 5
            git pull --rebase origin main
          fi
        done
        
    - name: Create summary
      if: always()
      run: |
        echo "# 🏰 Dream Guilds Update Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Date:** $(date -u '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
        echo "🔧 **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "🌿 **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Status aktualizacji
        if [ "${{ steps.changes.outputs.changed }}" = "true" ]; then
          echo "✅ **Status:** Successfully updated" >> $GITHUB_STEP_SUMMARY
          echo "👥 **Players:** ${{ steps.changes.outputs.players }}" >> $GITHUB_STEP_SUMMARY  
          echo "🏰 **Guilds:** ${{ steps.changes.outputs.guilds }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changes" >> $GITHUB_STEP_SUMMARY
          echo "- Updated guild membership data" >> $GITHUB_STEP_SUMMARY
          echo "- Committed to repository" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ steps.scraper.conclusion }}" = "success" ]; then
          echo "🔄 **Status:** No changes detected" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️ The guild data is already up to date" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status:** Update failed" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ Check the workflow logs for details" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Generated by GitHub Actions*" >> $GITHUB_STEP_SUMMARY

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Workflow failed!"
        echo "🔍 Check the logs above for error details"
        echo "💡 Common issues:"
        echo "   - Network timeout when scraping"
        echo "   - Website structure changed"
        echo "   - Permission issues"
        echo "   - Invalid JSON format" Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}  # NAPRAWKA: jawny token
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        # Python dependencies
        pip install requests beautifulsoup4 lxml
        
        # System dependencies  
        sudo apt-get update
        sudo apt-get install -y jq
        
    - name: Debug - Check files before
      run: |
        echo "📂 Current directory:"
        pwd
        echo ""
        echo "📂 Directory structure:"
        find . -name "*.py" -o -name "*.json" -o -name "*.yml" | head -20
        echo ""
        echo "📁 Guilds directory:"
        if [ -d "guilds" ]; then
          echo "✅ guilds/ exists"
          ls -la guilds/
        else
          echo "❌ guilds/ directory not found!"
          echo "Available directories:"
          ls -la
        fi
        
    - name: Run scraper
      id: scraper
      run: |
        echo "🚀 Aktualizuję guilds/guilds.json..."
        cd guilds
        
        # Sprawdź czy plik update_guilds.py istnieje
        if [ ! -f "update_guilds.py" ]; then
          echo "❌ Plik update_guilds.py nie istnieje!"
          exit 1
        fi
        
        # Uruchom scraper z lepszym error handling
        python update_guilds.py 2>&1 || {
          echo "❌ Scraper zakończył się błędem"
          exit 1
        }
        
        # Sprawdź czy guilds.json został utworzony/zaktualizowany
        if [ ! -f "guilds.json" ]; then
          echo "❌ Plik guilds.json nie został utworzony!"
          exit 1
        fi
        
        echo "✅ Scraper zakończony pomyślnie"
        
    - name: Debug - Check files after
      run: |
        echo "📂 Sprawdzam guilds.json:"
        if [ -f "guilds/guilds.json" ]; then
          echo "✅ Plik guilds.json istnieje"
          echo "📏 Rozmiar: $(wc -c < guilds/guilds.json) bajtów"
          echo "📊 Liczba graczy: $(jq '. | length' guilds/guilds.json 2>/dev/null || echo 'błąd parsowania')"
          echo "🔍 Pierwsze 3 linie:"
          head -3 guilds/guilds.json
        else
          echo "❌ Plik guilds.json nie istnieje!"
        fi
        
    - name:
