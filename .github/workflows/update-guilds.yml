name: Update Dream Guilds

on:
  schedule:
    - cron: '0 12 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-guilds:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4 lxml
        sudo apt-get update
        sudo apt-get install -y jq
        
    - name: Debug - Check files before
      run: |
        echo "Current directory:"
        pwd
        echo ""
        echo "Directory structure:"
        find . -name "*.py" -o -name "*.json" -o -name "*.yml" | head -20
        echo ""
        echo "Guilds directory:"
        if [ -d "guilds" ]; then
          echo "‚úÖ guilds/ exists"
          ls -la guilds/
        else
          echo "‚ùå guilds/ directory not found!"
          ls -la
        fi
        
    - name: Run scraper
      id: scraper
      run: |
        echo "üöÄ Running guild scraper..."
        cd guilds
        
        if [ ! -f "update_guilds.py" ]; then
          echo "‚ùå update_guilds.py not found!"
          exit 1
        fi
        
        python update_guilds.py 2>&1 || {
          echo "‚ùå Scraper failed"
          exit 1
        }
        
        if [ ! -f "guilds.json" ]; then
          echo "‚ùå guilds.json was not created!"
          exit 1
        fi
        
        echo "‚úÖ Scraper completed successfully"
        
    - name: Debug - Check files after
      run: |
        echo "Checking guilds.json:"
        if [ -f "guilds/guilds.json" ]; then
          echo "‚úÖ guilds.json exists"
          echo "Size: $(wc -c < guilds/guilds.json) bytes"
          PLAYERS=$(jq '. | length' guilds/guilds.json 2>/dev/null || echo 'parse error')
          echo "Players: $PLAYERS"
          echo "First 3 lines:"
          head -3 guilds/guilds.json
        else
          echo "‚ùå guilds.json does not exist!"
        fi
        
    - name: Check for changes
      id: changes
      run: |
        git add guilds/guilds.json
        if git diff --cached --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "üîÑ No changes in guilds.json"
        else
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "‚úÖ guilds.json was updated"
          
          if [ -f "guilds/guilds.json" ]; then
            PLAYERS=$(jq '. | length' guilds/guilds.json 2>/dev/null || echo "0")
            UNIQUE_GUILDS=$(jq -r '. | to_entries | map(.value) | unique | length' guilds/guilds.json 2>/dev/null || echo "0")
            echo "üìä Players: $PLAYERS, Guilds: $UNIQUE_GUILDS"
            echo "players=$PLAYERS" >> $GITHUB_OUTPUT
            echo "guilds=$UNIQUE_GUILDS" >> $GITHUB_OUTPUT
          fi
        fi
        
    - name: Commit and push changes
      if: steps.changes.outputs.changed == 'true'
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "Dream Guild Bot"
        
        TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
        PLAYERS="${{ steps.changes.outputs.players }}"
        
        git add guilds/guilds.json
        
        COMMIT_MSG="ü§ñ Update guilds.json - $TIMESTAMP

üìä Updated with $PLAYERS players from Dream world
üîÑ Automated update via GitHub Actions"

        git commit -m "$COMMIT_MSG"
        
        for i in {1..3}; do
          if git push origin main; then
            echo "‚úÖ Push successful on attempt $i"
            break
          else
            echo "‚ö†Ô∏è Push failed, attempt $i/3"
            if [ $i -eq 3 ]; then
              echo "‚ùå Push failed after 3 attempts"
              exit 1
            fi
            sleep 5
            git pull --rebase origin main
          fi
        done
        
    - name: Create summary
      if: always()
      run: |
        echo "# üè∞ Dream Guilds Update Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìÖ **Date:** $(date -u '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
        echo "üîß **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "üåø **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.changes.outputs.changed }}" = "true" ]; then
          echo "‚úÖ **Status:** Successfully updated" >> $GITHUB_STEP_SUMMARY
          echo "üë• **Players:** ${{ steps.changes.outputs.players }}" >> $GITHUB_STEP_SUMMARY  
          echo "üè∞ **Guilds:** ${{ steps.changes.outputs.guilds }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changes" >> $GITHUB_STEP_SUMMARY
          echo "- Updated guild membership data" >> $GITHUB_STEP_SUMMARY
          echo "- Committed to repository" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ steps.scraper.conclusion }}" = "success" ]; then
          echo "üîÑ **Status:** No changes detected" >> $GITHUB_STEP_SUMMARY
          echo "‚ÑπÔ∏è The guild data is already up to date" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Status:** Update failed" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è Check the workflow logs for details" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Generated by GitHub Actions*" >> $GITHUB_STEP_SUMMARY
